
----PROMPT for planning----
[{'role': 'system', 'content': 'You are a senior robot code engineer'}, {'role': 'system', 'content': 'You can only use these functions: turnright, turnleft, walkforward, walktowards <obj>, walk <obj>, run <obj>, grab <obj>, switchon <obj>, switchoff <obj>, open <obj>, close <obj>, lookat <obj>, sit <obj>, standup, find <obj>, turnto <obj>, drink <obj>, pointat <obj>, watch <obj>, putin <obj> <obj>, putback <obj> <obj>'}, {'role': 'system', 'content': "You can only replace above obj with parameters in the following collection: \n\nobjects = ['microwave', 'wallshelf', 'oventray', 'candle', 'mug', 'floor', 'cutleryknife', 'apple', 'wall', 'plate', 'paper', 'bananas', 'stove', 'clock', 'crackers', 'clothespants', 'hairproduct', 'closet', 'lightswitch', 'salmon', 'pie', 'barsoap', 'orchid', 'plum', 'painkillers', 'fryingpan', 'photoframe', 'mousemat', 'towelrack', 'cereal', 'kitchentable', 'garbagecan', 'washingmachine', 'waterglass', 'clothespile', 'sink', 'condimentbottle', 'slippers', 'toothbrush', 'tvstand', 'condimentshaker', 'mouse', 'door', 'faucet', 'clothesshirt', 'bench', 'closetdrawer', 'nightstand', 'curtains', 'kitchencabinet', 'toothpaste', 'cupcake', 'lime', 'computer', 'candybar', 'toilet', 'bedroom', 'tablelamp', 'wallpictureframe', 'stall', 'peach', 'desk', 'fridge', 'perfume', 'box', 'tv', 'keyboard', 'kitchencounterdrawer', 'stovefan', 'bookshelf', 'toaster', 'window', 'coffeetable', 'livingroom', 'folder', 'kitchen', 'bed', 'cpuscreen', 'cutleryfork', 'book', 'powersocket', 'dishbowl', 'cellphone', 'doorjamb', 'chair', 'sofa', 'chips', 'creamybuns', 'facecream', 'washingsponge', 'bathtub', 'deodorant', 'ceiling', 'wineglass', 'wallphone', 'walllamp', 'towel', 'coffeepot', 'rug', 'cabinet', 'bathroom', 'whippedcream', 'pillow', 'bathroomcounter', 'dishwashingliquid', 'bathroomcabinet', 'ceilinglamp', 'breadslice', 'chocolatesyrup', 'hanger', 'kitchencounter', 'radio', 'remotecontrol', 'bellpepper', 'coffeemaker']"}, {'role': 'user', 'content': 'put_the_wine_glass_in_the_kitchen_cabinet'}, {'role': 'assistant', 'content': "def put_the_wine_glass_in_the_kitchen_cabinet():\n\t# 0: walk to kitchen\n\twalk('kitchen')\n\t# 1: find wine glass\n\tfind('wineglass')\n\t# 2: grab wine glass\n\tassert('close' to 'wineglass')\n\t\telse: find('wineglass')\n\tgrab('wineglass')\n\t# 3: find kitchen cabinet\n\tfind('kitchencabinet')\n\t# 4: open kitchen cabinet\n\tassert('close' to 'kitchencabinet' )  \n\t\telse: find('kitchencabinet')\n\tassert('kitchencabinet' is 'closed' )\n\t\telse: close('kitchencabinet')\n\topen('kitchencabinet')\n\t# 5: put wine glass in kitchen cabinet\n\tassert('wineglass' in 'hands' )\n\t\telse: find('wineglass')\n\t\telse: grab('wineglass')\n\tassert('close' to 'kitchencabinet' )  \n\t\telse: find('kitchencabinet')\n\tassert('kitchencabinet' is 'opened' )\n\t\telse: open('kitchencabinet')\n\tputin('wineglass', 'kitchencabinet')\n\t# 6: close kitchen cabinet\n\tassert('close' to 'kitchencabinet' )\n\t\telse: find('kitchencabinet')\n\tassert('kitchencabinet' is 'opened' )\n\t\telse: open('kitchencabinet')\n\tclose('kitchencabinet')\n\t# 7: Done"}, {'role': 'user', 'content': 'throw_away_the_lime'}, {'role': 'assistant', 'content': "def throw_away_the_lime():\n\t# 0: walk to kitchen\n\twalk('kitchen')\n\t# 1: find garbage can\n\tfind('garbagecan')\n\t# 2: grab lime\n\tfind('lime')\n\tassert('close' to 'lime')\n\t\telse: find('lime')\n\tgrab('lime')\n\t# 3: put lime in garbage can\n\tfind('garbagecan')\n\tassert('close' to 'garbagecan' )  \n\t\telse: find('garbagecan')\n\tassert('garbagecan' is 'closed' )\n\t\telse: close('garbagecan')\n\topen('garbagecan')\n\tassert('lime' in 'hands' )\n\t\telse: find('lime')\n\t\telse: grab('lime')\n\tassert('close' to 'garbagecan' )  \n\t\telse: find('garbagecan')\n\tassert('garbagecan' is 'opened' )\n\t\telse: open('garbagecan')\n\tputin('lime', 'garbagecan')\n\tassert('close' to 'garbagecan' )\n\t\telse: find('garbagecan')\n\tassert('garbagecan' is 'opened' )\n\t\telse: open('garbagecan')\n\tclose('garbagecan')\n\t# 4: Done"}, {'role': 'user', 'content': 'wash_mug'}, {'role': 'assistant', 'content': "def wash_mug():\n\t# 0: walk to kitchen\n\twalk('kitchen')\n\t# 1: find sink\n\tfind('sink')\n\t# 2: turn on faucet\n\tfind('faucet')\n\tfind('faucet')\n\tfind('faucet')\n\tassert('close' to 'faucet' )  \n\t\telse: find('faucet')\n\tassert('faucet' is 'switchoff' )\n\t\telse: switchoff('faucet')\n\tswitchon('faucet')\n\t# 3: put mug under water\n\tfind('mug')\n\tfind('mug')\n\tfind('mug')\n\tassert('close' to 'mug')\n\t\telse: find('mug')\n\tgrab('mug')\n\tfind('sink')\n\tassert('mug' in 'hands' )\n\t\telse: find('mug')\n\t\telse: grab('mug')\n\tassert('close' to 'sink' )  \n\t\telse: find('sink')\n\tputin('mug', 'sink')\n\t# 4: grab dishwashing liquid\n\tfind('dishwashingliquid')\n\tassert('close' to 'dishwashingliquid')\n\t\telse: find('dishwashingliquid')\n\tgrab('dishwashingliquid')\n\t# 5: put dishwashing liquid on mug\n\tfind('sink')\n\tassert('dishwashingliquid' in 'hands' )\n\t\telse: find('dishwashingliquid')\n\t\telse: grab('dishwashingliquid')\n\tassert('close' to 'sink' )  \n\t\telse: find('sink')\n\tputin('dishwashingliquid', 'sink')\n\t# 6: grab washingsponge\n\tfind('washingsponge')\n\tassert('close' to 'washingsponge')\n\t\telse: find('washingsponge')\n\tgrab('washingsponge')\n\t# 7: start scrubbing mug\n\tfind('sink')\n\tassert('washingsponge' in 'hands' )\n\t\telse: find('washingsponge')\n\t\telse: grab('washingsponge')\n\tassert('close' to 'sink' )  \n\t\telse: find('sink')\n\tputin('washingsponge', 'sink')\n\t# 8: rinse mug off with water 1\n\t# 9: dry mug with towel 1\n\t# 10: Done\n\tfind('faucet')\n\tassert('close' to 'faucet' )\n\t\telse: find('faucet')\n\tassert('faucet' is 'switchon' )\n\t\telse: switchon('faucet')\n\tswitchoff('faucet')"}]

----Test set tasks----
['put salmon in the fridge', 'wash the plate', 'bring coffeepot and cupcake to the coffee table', 'microwave salmon']
Total: 4 tasks

----PROMPT for state check----
[{'role': 'user', 'content': 'You see: microwave is OFF and CLOSED, lightswitch is ON, cereal, bookshelf, book is CLOSED, bookshelf ON floor, microwave ON kitchencounterdrawer, salmon ON microwave, book INSIDE bookshelf, dishbowl INSIDE bookshelf, clothespile INSIDE bookshelf, bananas INSIDE bookshelf, box ON bookshelf, book ON kitchentable, dishbowl ON bookshelf, condimentshaker INSIDE bookshelf, box INSIDE bookshelf, character HOLD_RH book, book ON rug, cereal ON wallshelf, plate INSIDE microwave, condimentbottle INSIDE bookshelf, microwave ON kitchencounter, paper INSIDE bookshelf'}, {'role': 'user', 'content': "assert('close' to 'mug' )"}, {'role': 'assistant', 'content': 'False'}, {'role': 'user', 'content': "assert('close' to 'microwave' )"}, {'role': 'assistant', 'content': 'True'}, {'role': 'user', 'content': "assert('book' is 'closed' )"}, {'role': 'assistant', 'content': 'True'}, {'role': 'user', 'content': "assert('lightswitch' is 'OFF')"}, {'role': 'assistant', 'content': 'False'}, {'role': 'user', 'content': "assert('book' in 'bookshelf')"}, {'role': 'assistant', 'content': 'True'}, {'role': 'user', 'content': "assert('book' in 'hands')"}, {'role': 'assistant', 'content': 'True'}, {'role': 'user', 'content': "assert('cereal' on 'bookshelf')"}, {'role': 'assistant', 'content': 'False'}]

--Executing task: put salmon in the fridge--
Plan:  def put_salmon_in_the_fridge():
	# 0: walk to kitchen
	walk('kitchen')
	# 1: find fridge
	find('fridge')
	# 2: open fridge
	assert('close' to 'fridge' )  
		else: find('fridge')
	assert('fridge' is 'closed' )
		else: close('fridge')
	open('fridge')
	# 3: find salmon
	find('salmon')
	# 4: grab salmon
	assert('close' to 'salmon')
		else: find('salmon')
	grab('salmon')
	# 5: put salmon in fridge
	assert('salmon' in 'hands' )
		else: find('salmon')
		else: grab('salmon')
	assert('close' to 'fridge' )  
		else: find('fridge')
	assert('fridge' is 'opened' )
		else: open('fridge')
	putin('salmon', 'fridge')
	# 6: close fridge
	assert('close' to 'fridge' )
		else: find('fridge')
	assert('fridge' is 'opened' )
		else: open('fridge')
	close('fridge')
	# 7:Done

<char0> [walk] <kitchen> (205)
Action: [WALK] <kitchen> (205) [0], act_return: True
<char0> [find] <fridge> (305)
Action: [FIND] <fridge> (305) [0], act_return: True
State check:
You see: fridge is CLOSED, fridge ON floor.
assert('close' to 'fridge' )
True
State check:
You see: fridge is CLOSED, fridge ON floor.
assert('fridge' is 'closed' )
True
<char0> [open] <fridge> (305)
Action: [OPEN] <fridge> (305) [0], act_return: True
<char0> [find] <salmon> (327)
Action: [FIND] <salmon> (327) [0], act_return: True
State check:
You see: salmon, salmon ON microwave.
assert('close' to 'salmon')
False
<char0> [find] <salmon> (327)
Action: [FIND] <salmon> (327) [0], act_return: True
State check:
You see: salmon, salmon ON microwave.
grab('salmon')
You grab
<char0> [grab] <salmon> (327)
Action: [GRAB] <salmon> (327) [0], act_return: True
State check:
You see: salmon, .  You have salmon.
assert('salmon' in 'hands' )
False
<char0> [find] <salmon> (327)
Action: [FIND] <salmon> (327) [0], act_return: True
<char0> [grab] <salmon> (327)
Action: [GRAB] <salmon> (327) [0], act_return: True
State check:
You see: 
assert('close' to 'fridge' )
I'm
bad action
State check:
You see: 
assert('fridge' is 'opened' )
I'm
bad action
<char0> [putin] <salmon> (327) <fridge> (305)
Action: [PUTIN] <salmon> (327) <fridge> (305) [0], act_return: False
act_state: False, message: <character> (1) is not close to <fridge> (305) when executing "[PUTIN] <salmon> (327) <fridge> (305) [0]"
--------------------
Fixaction_script : <char0> [find] <salmon> (327)
FixAction: [FIND] <salmon> (327) [0], act_return: True
Fixaction_script : <char0> [putin] <salmon> (327) <fridge> (305)
TRYact_state: False, message: <character> (1) is not close to <fridge> (305) when executing "[PUTIN] <salmon> (327) <fridge> (305) [0]"
--------------------
Fixaction_script : <char0> [find] <salmon> (327)
FixAction: [FIND] <salmon> (327) [0], act_return: True
Fixaction_script : <char0> [putin] <salmon> (327) <fridge> (305)
TRYact_state: False, message: <character> (1) is not close to <fridge> (305) when executing "[PUTIN] <salmon> (327) <fridge> (305) [0]"
--------------------
Fixaction_script : <char0> [find] <salmon> (327)
FixAction: [FIND] <salmon> (327) [0], act_return: True
Fixaction_script : <char0> [putin] <salmon> (327) <fridge> (305)
TRYact_state: False, message: <character> (1) is not close to <fridge> (305) when executing "[PUTIN] <salmon> (327) <fridge> (305) [0]"
--------------------
Fixaction_script : <char0> [find] <salmon> (327)
FixAction: [FIND] <salmon> (327) [0], act_return: True
Fixaction_script : <char0> [putin] <salmon> (327) <fridge> (305)
TRYact_state: False, message: <character> (1) is not close to <fridge> (305) when executing "[PUTIN] <salmon> (327) <fridge> (305) [0]"
--------------------
Fixaction_script : <char0> [find] <salmon> (327)
FixAction: [FIND] <salmon> (327) [0], act_return: True
Fixaction_script : <char0> [putin] <salmon> (327) <fridge> (305)
TRYact_state: False, message: <character> (1) is not close to <fridge> (305) when executing "[PUTIN] <salmon> (327) <fridge> (305) [0]"
Can't handle the error. Please regenerate the task list.
State check:
You see: 
assert('close' to 'fridge' )
I'm
bad action
State check:
You see: 
assert('fridge' is 'opened' )
I'm
bad action
<char0> [close] <fridge> (305)
Action: [CLOSE] <fridge> (305) [0], act_return: False
act_state: False, message: <character> (1) is not close to <fridge> (305) when executing "[PUTIN] <salmon> (327) <fridge> (305) [0]",<character> (1) is not close to <fridge> (305) when executing "[CLOSE] <fridge> (305) [0]"
--------------------
Fixaction_script : <char0> [find] <salmon> (327)
FixAction: [FIND] <salmon> (327) [0], act_return: True
Fixaction_script : <char0> [close] <fridge> (305)
TRYact_state: False, message: <character> (1) is not close to <fridge> (305) when executing "[CLOSE] <fridge> (305) [0]"
--------------------
Fixaction_script : <char0> [find] <fridge> (305)
FixAction: [FIND] <fridge> (305) [0], act_return: True
Fixaction_script : <char0> [close] <fridge> (305)
TRYact: [CLOSE] <fridge> (305) [0], TRYact_state: True
Succesfully handle the error, and achieve the goal.We use 2 step(s) to fix the problem.

--Executing task: wash the plate--
Plan:  def wash_the_plate():
	# 0: walk to kitchen
	walk('kitchen')
	# 1: find sink
	find('sink')
	# 2: turn on faucet
	find('faucet')
	find('faucet')
	find('faucet')
	assert('close' to 'faucet' )  
		else: find('faucet')
	assert('faucet' is 'switchoff' )
		else: switchoff('faucet')
	switchon('faucet')
	# 3: put plate under water
	find('plate')
	find('plate')
	find('plate')
	assert('close' to 'plate')
		else: find('plate')
	grab('plate')
	find('sink')
	assert('plate' in 'hands' )
		else: find('plate')
		else: grab('plate')
	assert('close' to 'sink' )  
		else: find('sink')
	putin('plate', 'sink')
	# 4: grab dishwashing liquid
	find('dishwashingliquid')
	assert('close' to 'dishwashingliquid')
		else: find('dishwashingliquid')
	grab('dishwashingliquid')
	# 5: put dishwashing liquid on plate
	find('sink')
	assert('dishwashingliquid' in 'hands' )
		else: find('dishwashingliquid')
		else: grab('dishwashingliquid')
	assert('close' to 'sink' )  
		else: find('sink')
	putin('dishwashingliquid', 'sink')
	# 6: grab washingsponge
	find('washingsponge')
	assert('close' to 'washingsponge')
		else: find('washingsponge')
	grab('washingsponge')
	# 7: start scrubbing plate
	find('sink')
	assert('washingsponge' in 'hands' )
		else: find('washingsponge')
		else: grab('washingsponge')
	assert('close' to 'sink' )  
		else: find('sink')
	putin('washingsponge', 'sink')
	# 8: rinse plate off with water
	# 9: dry plate with towel
	# 10:Done

<char0> [walk] <kitchen> (205)
Action: [WALK] <kitchen> (205) [0], act_return: True
<char0> [find] <sink> (247)
Action: [FIND] <sink> (247) [0], act_return: True
<char0> [find] <faucet> (248)
Action: [FIND] <faucet> (248) [0], act_return: True
State check:
You see: faucet is OFF, faucet ON kitchencounter.
assert('close' to 'faucet' )
False
<char0> [find] <faucet> (50)
Action: [FIND] <faucet> (50) [0], act_return: True
State check:
You see: faucet is OFF, faucet ON bathroomcounter.
assert('faucet' is 'switchoff' )
False
<char0> [switchoff] <faucet> (50)
Action: [SWITCHOFF] <faucet> (50) [0], act_return: False
act_state: False, message: <faucet> (50) is not on when executing "[SWITCHOFF] <faucet> (50) [0]"
--------------------
Fixaction_script : <char0> [switchon] <faucet> (50)
FixAction: [SWITCHON] <faucet> (50) [0], act_return: True
Fixaction_script : <char0> [switchoff] <faucet> (50)
TRYact: [SWITCHOFF] <faucet> (50) [0], TRYact_state: True
Succesfully handle the error, and achieve the goal.We use 1 step(s) to fix the problem.
State check:
You see: faucet is OFF, faucet ON bathroomcounter.
switchon('faucet')
I'm
<char0> [switchon] <faucet> (50)
Action: [SWITCHON] <faucet> (50) [0], act_return: True
<char0> [find] <plate> (199)
Action: [FIND] <plate> (199) [0], act_return: True
State check:
You see: plate, plate ON coffeetable.
assert('close' to 'plate')
True
<char0> [grab] <plate> (199)
Action: [GRAB] <plate> (199) [0], act_return: True
<char0> [find] <sink> (247)
Action: [FIND] <sink> (247) [0], act_return: True
State check:
You see: plate, .  You have plate.
assert('plate' in 'hands' )
True
State check:
You see: sink
assert('close' to 'sink' )
True
<char0> [putin] <plate> (199) <sink> (247)
Action: [PUTIN] <plate> (199) <sink> (247) [0], act_return: True
<char0> [find] <dishwashingliquid> (267)
Action: [FIND] <dishwashingliquid> (267) [0], act_return: True
State check:
You see: dishwashingliquid, dishwashingliquid ON kitchencounter.
assert('close' to 'dishwashingliquid')
False
<char0> [find] <dishwashingliquid> (267)
Action: [FIND] <dishwashingliquid> (267) [0], act_return: True
State check:
You see: dishwashingliquid, dishwashingliquid ON kitchencounter.
grab('dishwashingliquid')
You grab
<char0> [grab] <dishwashingliquid> (267)
Action: [GRAB] <dishwashingliquid> (267) [0], act_return: True
<char0> [find] <sink> (247)
Action: [FIND] <sink> (247) [0], act_return: True
State check:
You see: dishwashingliquid, .  You have dishwashingliquid.
assert('dishwashingliquid' in 'hands' )
True
State check:
You see: sink
assert('close' to 'sink' )
False
<char0> [find] <sink> (247)
Action: [FIND] <sink> (247) [0], act_return: True
State check:
You see: sink
putin('dishwashingliquid', 'sink')
I'm
<char0> [putin] <dishwashingliquid> (267) <sink> (247)
Action: [PUTIN] <dishwashingliquid> (267) <sink> (247) [0], act_return: True
<char0> [find] <washingsponge> (266)
Action: [FIND] <washingsponge> (266) [0], act_return: True
State check:
You see: washingsponge, washingsponge ON kitchencounter.
assert('close' to 'washingsponge')
False
<char0> [find] <washingsponge> (266)
Action: [FIND] <washingsponge> (266) [0], act_return: True
State check:
You see: washingsponge, washingsponge ON kitchencounter.
grab('washingsponge')
You grab
<char0> [grab] <washingsponge> (266)
Action: [GRAB] <washingsponge> (266) [0], act_return: True
<char0> [find] <sink> (247)
Action: [FIND] <sink> (247) [0], act_return: True
State check:
You see: washingsponge, .  You have washingsponge.
assert('washingsponge' in 'hands' )
True
State check:
You see: sink
assert('close' to 'sink' )
True
<char0> [putin] <washingsponge> (266) <sink> (247)
Action: [PUTIN] <washingsponge> (266) <sink> (247) [0], act_return: True

--Executing task: bring coffeepot and cupcake to the coffee table--
Plan:  def bring_coffeepot_and_cupcake_to_the_coffee_table():
	# 0: find coffeepot
	find('coffeepot')
	# 1: grab coffeepot
	assert('close' to 'coffeepot')
		else: find('coffeepot')
	grab('coffeepot')
	# 2: walk to coffee table
	walk('coffeetable')
	# 3: put coffeepot on coffee table
	assert('coffeepot' in 'hands')
		else: find('coffeepot')
	puton('coffeepot', 'coffeetable')
	# 4: find cupcake
	find('cupcake')
	# 5: grab cupcake
	assert('close' to 'cupcake')
		else: find('cupcake')
	grab('cupcake')
	# 6: put cupcake on coffee table
	assert('cupcake' in 'hands')
		else: find('cupcake')
	puton('cupcake', 'coffeetable')
	# 7:Done

<char0> [find] <coffeepot> (307)
Action: [FIND] <coffeepot> (307) [0], act_return: True
State check:
You see: coffeepot is CLOSED, coffeepot ON kitchencounter, coffeepot INSIDE coffeemaker
assert('close' to 'coffeepot')
True
<char0> [grab] <coffeepot> (307)
Action: [GRAB] <coffeepot> (307) [0], act_return: True
<char0> [walk] <coffeetable> (111)
Action: [WALK] <coffeetable> (111) [0], act_return: True
State check:
You see: coffeepot is CLOSED, coffeetable ON floor.  You have coffeepot.
assert('coffeepot' in 'hands')
True
<char0> [puton] <coffeepot> (307) <coffeetable> (111)
<char0> [find] <cupcake> (195)
Action: [FIND] <cupcake> (195) [0], act_return: True
State check:
You see: cupcake, cupcake ON desk.  You have coffeepot.
assert('close' to 'cupcake')
True
<char0> [grab] <cupcake> (195)
Action: [GRAB] <cupcake> (195) [0], act_return: True
State check:
You see: cupcake, .  You have cupcake
assert('cupcake' in 'hands')
True
<char0> [puton] <cupcake> (195) <coffeetable> (111)

--Executing task: microwave salmon--
Plan:  def microwave_salmon():
	# 0: walk to kitchen
	walk('kitchen')
	# 1: find microwave
	find('microwave')
	# 2: open microwave
	assert('close' to 'microwave' )  
		else: find('microwave')
	assert('microwave' is 'closed' )
		else: close('microwave')
	open('microwave')
	# 3: find salmon
	find('salmon')
	# 4: put salmon in microwave
	assert('close' to 'microwave' )  
		else: find('microwave')
	assert('microwave' is 'opened' )
		else: open('microwave')
	putin('salmon', 'microwave')
	# 5: close microwave
	assert('close' to 'microwave' )
		else: find('microwave')
	assert('microwave' is 'opened' )
		else: open('microwave')
	close('microwave')
	# 6: turn on microwave
	find('microwave')
	find('microwave')
	find('microwave')
	assert('close' to 'microwave' )  
		else: find('microwave')
	assert('microwave' is 'switchoff' )
		else: switchoff('microwave')
	switchon('microwave')
	# 7: set microwave timer
	find('microwave')
	find('microwave')
	find('microwave')
	assert('close' to 'microwave' )  
		else: find('microwave')
	set_timer('microwave', 'salmon', '3 minutes') # Replace '3 minutes' with desired cooking time
	# 8: start microwave
	find('microwave')
	find('microwave')
	find('microwave')
	assert('close' to 'microwave' )  
		else: find('microwave')
	start('microwave')
	# 9: wait for microwave to finish
	wait('microwave')
	# 10:Done

<char0> [walk] <kitchen> (205)
Action: [WALK] <kitchen> (205) [0], act_return: True
<char0> [find] <microwave> (313)
Action: [FIND] <microwave> (313) [0], act_return: True
State check:
You see: microwave is OFF and CLOSED, microwave ON kitchencounter, microwave ON kitchencounterdrawer, plate INSIDE microwave.
assert('close' to 'microwave' )
True
State check:
You see: microwave is OFF and CLOSED, microwave ON kitchencounter, microwave ON kitchencounterdrawer, plate INSIDE microwave.
assert('microwave' is 'closed' )
True
<char0> [open] <microwave> (313)
Action: [OPEN] <microwave> (313) [0], act_return: True
<char0> [find] <salmon> (327)
Action: [FIND] <salmon> (327) [0], act_return: True
State check:
You see: microwave is OFF and OPEN, microwave ON kitchencounter, salmon ON microwave, microwave ON kitchencounterdrawer, plate INSIDE microwave.
assert('close' to 'microwave' )
True
State check:
You see: microwave is OFF and OPEN, microwave ON kitchencounter, salmon ON microwave, microwave ON kitchencounterdrawer, plate INSIDE microwave.
assert('microwave' is 'opened' )
True
obj not in hand
State check:
You see: microwave is OFF and OPEN, microwave ON kitchencounter, salmon ON microwave, microwave ON kitchencounterdrawer, plate INSIDE microwave.
assert('close' to 'microwave' )
True
State check:
You see: microwave is OFF and OPEN, microwave ON kitchencounter, salmon ON microwave, microwave ON kitchencounterdrawer, plate INSIDE microwave.
assert('microwave' is 'opened' )
True
<char0> [close] <microwave> (313)
Action: [CLOSE] <microwave> (313) [0], act_return: True
<char0> [find] <microwave> (313)
Action: [FIND] <microwave> (313) [0], act_return: True
State check:
You see: microwave is OFF and CLOSED, microwave ON kitchencounter, salmon ON microwave, microwave ON kitchencounterdrawer, plate INSIDE microwave.
assert('close' to 'microwave' )
True
State check:
You see: microwave is OFF and CLOSED, microwave ON kitchencounter, salmon ON microwave, microwave ON kitchencounterdrawer, plate INSIDE microwave.
assert('microwave' is 'switchoff' )
False
<char0> [switchoff] <microwave> (313)
Action: [SWITCHOFF] <microwave> (313) [0], act_return: False
act_state: False, message: <microwave> (313) is not on when executing "[SWITCHOFF] <microwave> (313) [0]"
--------------------
Fixaction_script : <char0> [switchoff] <microwave> (313)
FixAction: [SWITCHOFF] <microwave> (313) [0], act_return: False
FixAction Fail!
--------------------
Fixaction_script : <char0> [switchoff] <microwave> (313)
FixAction: [SWITCHOFF] <microwave> (313) [0], act_return: False
FixAction Fail!
--------------------
Fixaction_script : <char0> [switchoff] <microwave> (313)
FixAction: [SWITCHOFF] <microwave> (313) [0], act_return: False
FixAction Fail!
--------------------
Fixaction_script : <char0> [switchoff] <microwave> (313)
FixAction: [SWITCHOFF] <microwave> (313) [0], act_return: False
FixAction Fail!
