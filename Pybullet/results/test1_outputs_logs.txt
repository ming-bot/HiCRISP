
----PROMPT for planning----
[{'role': 'system', 'content': 'You are a senior robot code engineer'}, {'role': 'user', 'content': 'Here i give you some code format examples.'}, {'role': 'user', 'content': 'pick up a block'}, {'role': 'assistant', 'content': "def pick_up_a_block():\n\t# 0: find a block\n\tfind('blue block')\n\t# 1: Pick the block\n\tpick('blue block')\n\t"}, {'role': 'user', 'content': 'put a block in a bowl'}, {'role': 'assistant', 'content': "def put_a_block_in_bowl():\n\t# 0: find a block\n\tfind('blue block')\n\t# 1: Pick the block\n\tpick('blue block')\n\t# 2: find a bowl\n\tfind('pink bowl')\n\t# 3: put the block in the bowl\n\tplace('pink bowl')\n\t"}, {'role': 'system', 'content': 'You can only use these functions: find <obj>, pick <obj>, place <obj>, and the code should not be for/while structure.'}, {'role': 'system', 'content': "You can only replace above <obj> with objects that are :['cyan block', 'gray block', 'pink block', 'brown block', 'red bowl']"}]

----Test set tasks----
Store two blocks in the bowl

--Executing task: Store two blocks in the bowl--
Plan:  def store_two_blocks_in_the_bowl():
	# 0: find a block
	find('pink block')
	# 1: Pick the block
	pick('pink block')
	
	# 2: find another block
	find('brown block')
	# 3: Pick the second block
	pick('brown block')
	
	# 4: find a bowl
	find('red bowl')
	# 5: put the blocks in the bowl
	place('red bowl')

Executing action: find pink block

(True, array([ 0.00704644, -0.57      ,  0.02098936], dtype=float32))


success
Executing action: pick pink block

(True, 'The action is legal.')


success
Executing action: find brown block

(True, array([-0.14449285, -0.36959147,  0.02098936], dtype=float32))


success
Executing action: pick brown block

(False, 'The robot should place the object it has before picks another.')

Low level correction action: place [ 0.25828821 -0.47690627  0.        ].
(True, 'The action is legal')

(True, 'The action is legal.')


success
Executing action: find red bowl

(True, array([-0.19060002, -0.5874465 ,  0.02      ], dtype=float32))


success
Executing action: place red bowl

(True, 'The action is legal')


success

fail, the robot should pick another block and place it in the bowl
Complete('task') fail, the robot should pick another block and place it in the bowl

fix action is: pick('cyan block')
Low level correction action: find ['cyan', 'block'].
Low level correction state: True.

(True, 'The action is legal.')

success


FixAction_Return: success

TRYact:['Complete', 'task']

fail, the robot has a cyan block, but it hasn't place it in the bowl. Try place('red bowl') code
TRYact_result: fail, the robot has a cyan block, but it hasn't place it in the bowl. Try place('red bowl') code
Complete('task') fail, the robot has a cyan block, but it hasn't place it in the bowl. Try place('red bowl') code

fix action is: place('red bowl')
success


FixAction_Return: success

TRYact:['Complete', 'task']

success
TRYact_state: Fix successfully
Succesfully handle the error, and achieve the goal.We use 3 step(s) to fix the problem.
exec_subtasks: [6]
total_subtasks: [10]
